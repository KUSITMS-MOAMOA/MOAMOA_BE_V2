name: CI/CD

on:
  push:
    branches: [ "develop" ]

jobs:
  deploy:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '21'

      - name: Grant execute permission for gradlew
        run: |
          chmod +x gradlew
          ./gradlew build -x test

      - name: Generate afterInstall.sh
        run: |
          mkdir -p ./scripts
          cat <<EOF > ./scripts/afterInstall.sh
          ${{ secrets.AFTER_INSTALL_SCRIPT }}
          EOF
        shell: bash

      - name: Set execute permission for afterInstall.sh
        run: chmod +x ./scripts/afterInstall.sh

      - name: Generate appspec.yml
        run: |
          cat <<EOF > appspec.yml
          ${{ secrets.APPSPEC_YML }}
          EOF
        shell: bash

      - name: make application-secret.yml
        run: |
          touch ./src/main/resources/application-secret.yml
          echo "${{ secrets.APPLICATION_SECRET }}" > ./src/main/resources/application-secret.yml
        shell: bash

      - name: make chat-prompt.txt
        run: |
          touch ./src/main/resources/chat-prompt.txt
          echo "${{ secrets.CHAT_PROMPT }}" > ./src/main/resources/chat-prompt.txt
        shell: bash

      - name: make chat-summary-prompt.txt
        run: |
          cat <<EOF > ./src/main/resources/chat-summary-prompt.txt
          ${{ secrets.CHAT_SUMMARY_PROMPT }}
          EOF
        shell: bash

      - name: make memo-summary-prompt.txt
        run: |
          touch ./src/main/resources/memo-summary-prompt.txt
          echo "${{ secrets.MEMO_SUMMARY_PROMPT }}" > ./src/main/resources/memo-summary-prompt.txt
        shell: bash

      - name: make ability-analysis-prompt.txt
        run: |
          cat <<EOF > ./src/main/resources/ability-analysis-prompt.txt
          ${{ secrets.ABILITY_ANALYSIS_PROMPT }}
          EOF
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY=moamoa
          IMAGE_TAG=latest
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Upload to S3
        run: |
          S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
          zip -r ./$GITHUB_SHA.zip ./scripts appspec.yml
          aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME

      - name: Deploy to EC2 with CodeDeploy
        run: |
          CODE_DEPLOY_APPLICATION_NAME=${{ secrets.CODE_DEPLOY_APPLICATION_NAME }}
          CODE_DEPLOY_DEPLOYMENT_GROUP_NAME=${{ secrets.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }}
          S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
          aws deploy create-deployment \
          --application-name $CODE_DEPLOY_APPLICATION_NAME \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name $CODE_DEPLOY_DEPLOYMENT_GROUP_NAME \
          --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip
